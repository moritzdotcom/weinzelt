// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  password            String
  sessions            Session[]
  companyReservations CompanyReservation[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Event {
  id         String      @id @default(uuid())
  name       String
  current    Boolean
  eventDates EventDate[]
  createdAt  DateTime    @default(now())
}

model EventDate {
  id            String         @id @default(uuid())
  date          String
  dow           String
  eventId       String
  event         Event          @relation(fields: [eventId], references: [id])
  seatings      Seating[]
  specialEvents SpecialEvent[]
}

model Seating {
  id                   String               @id @default(uuid())
  eventDate            EventDate            @relation(fields: [eventDateId], references: [id])
  eventDateId          String
  timeslot             String
  availableVip         Int                  @default(10)
  availableStanding    Int                  @default(10)
  foodRequired         Boolean
  minimumSpend         Int                  @default(0)
  minimumSpendVip      Int                  @default(0)
  minimumSpendStanding Int                  @default(0)
  availablePackageIds  Int[]
  reservations         Reservation[]
  companyReservations  CompanyReservation[]
}

model Reservation {
  id                  String            @id @default(uuid())
  type                ReservationType   @default(VIP)
  name                String
  email               String
  people              Int
  seatingId           String
  seating             Seating           @relation(fields: [seatingId], references: [id])
  confirmationState   ConfirmationState @default(REQUESTED)
  packageName         String
  packageDescription  String
  packagePrice        Int
  foodCountMeat       Int               @default(0)
  foodCountFish       Int               @default(0)
  foodCountVegetarian Int               @default(0)
  totalFoodPrice      Int               @default(0)
  tableCount          Int               @default(1)
  tableNumber         String?
  notified            DateTime?
  paymentReminderSent DateTime?
  payed               Boolean           @default(false)
  pageVisitId         String?
  pageVisit           PageVisit?        @relation(fields: [pageVisitId], references: [id])
  referralCodeId      String?
  referralCode        ReferralCode?     @relation(fields: [referralCodeId], references: [id])
  createdAt           DateTime          @default(now())
}

model CompanyReservation {
  id          String   @id @default(uuid())
  seatingId   String
  seating     Seating  @relation(fields: [seatingId], references: [id])
  name        String
  companyName String?
  email       String
  people      Int
  budget      Int
  text        String?
  createdAt   DateTime @default(now())
  userId      String?
  responsible User?    @relation(fields: [userId], references: [id])
}

model PageVisit {
  id           String        @id @default(uuid())
  source       String
  medium       String?
  campaign     String?
  path         String
  ip           String
  country      String?
  region       String?
  city         String?
  latitude     Float?
  longitude    Float?
  createdAt    DateTime      @default(now())
  reservations Reservation[]
}

model ReferralCode {
  id           String        @id @default(uuid())
  code         String        @unique()
  description  String
  valid        Boolean       @default(true)
  createdAt    DateTime      @default(now())
  reservations Reservation[]
}

model SpecialEvent {
  id            String              @id @default(uuid())
  name          String
  description   String
  eventDate     EventDate           @relation(fields: [eventDateId], references: [id])
  eventDateId   String
  startTime     String
  endTime       String
  registrations EventRegistration[]
}

model EventRegistration {
  id             String       @id @default(uuid())
  specialEvent   SpecialEvent @relation(fields: [specialEventId], references: [id])
  specialEventId String
  name           String
  email          String
  personCount    Int
  createdAt      DateTime     @default(now())
  reminderSent   DateTime?
}

enum ConfirmationState {
  REQUESTED
  ACCEPTED
  DECLINED
}

enum ReservationType {
  VIP
  STANDING
}
